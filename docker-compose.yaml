services:
  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - mcpo
    ports:
      - ${OPEN_WEBUI_PORT-3000}:8080
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY=ae8c0b7e4f3a1c9efc83d4a7b59c193f7e194baf55f06e3cc5824c1e9f79b1d7'
      - 'OPENAI_API_KEY=${OPENAI_API_KEY}'
      - 'ENV=dev'
      - 'RESET_CONFIG_ON_START=True'
      - 'TOOL_SERVER_CONNECTIONS=[{"url": "http://mcpo:8000", "path": "openapi.json", "auth_type": "bearer", "key": "yhrbthmsbjrki58yhsmjenckmru55", "config": {"enable": true, "access_control": null}, "info": {"id": "", "name": "MCP Tools", "description": ""}}]'
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - mcp-network
    restart: unless-stopped

  mcp_server:
    build:
      context: ./docker
      dockerfile: DockerFIle.mcp
    container_name: mcp_server
    ports:
      - "8009:8009"
    environment:
      - PYTHONPATH=/app
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
    volumes:
      - .:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  mcpo:
    image: ghcr.io/open-webui/mcpo:main
    ports:
      - "8000:8000"
    command: >
      uvx mcpo --host 0.0.0.0 --port 8000 --api-key "yhrbthmsbjrki58yhsmjenckmru55"
      --server-type "streamable-http" -- http://mcp_server:8009
    depends_on:
      mcp_server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: always
    networks:
      - mcp-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    labels:
      compose.service: qdrant
    networks:
      - mcp-network


volumes:
  ollama: {}
  open-webui: {}
  qdrant_storage: {}

networks:
  mcp-network:
    driver: bridge
