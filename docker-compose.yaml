services:

  ollama:
    volumes:
      - ollama:/root/.ollama
    container_name: ollama
    tty: true
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    ports:
      - "11435:11434"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s

  # ollama-model-puller:
  #   image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
  #   container_name: ollama-model-puller
  #   depends_on:
  #     ollama:
  #       condition: service_healthy
  #   environment:
  #     - OLLAMA_HOST=http://ollama:11434
  #     - OLLAMA_LLM_MODEL=${OLLAMA_LLM_MODEL:-llama3.2}
  #     - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
  #   networks:
  #     - mcp-network
  #   entrypoint: ["/bin/bash"]
  #   command: >
  #     -c "
  #       echo '=== OLLAMA MODEL PULLER STARTING ===' &&
  #       echo 'Current time:' $$(date) &&
  #       echo 'Environment variables:' &&
  #       echo '  OLLAMA_LLM_MODEL: $${OLLAMA_LLM_MODEL}' &&
  #       echo '  OLLAMA_EMBEDDING_MODEL: $${OLLAMA_EMBEDDING_MODEL}' &&
  #       echo '  OLLAMA_HOST: $${OLLAMA_HOST}' &&
  #       echo '' &&
  #       echo 'Waiting for Ollama to be fully ready...' &&
  #       sleep 5 &&
  #       echo 'Testing Ollama connection...' &&
  #       OLLAMA_HOST=$${OLLAMA_HOST} ollama list || { echo 'ERROR: Cannot connect to Ollama'; exit 1; } &&
  #       echo 'Ollama API is responding successfully!' &&
  #       echo '' &&
  #       echo '=== PULLING LLM MODEL ===' &&
  #       echo 'üîÑ Starting download for model: $${OLLAMA_LLM_MODEL}' &&
  #       echo '‚è∞ Timestamp:' $$(date) &&
  #       echo 'üì• This may take several minutes depending on model size...' &&
  #       echo '' &&
  #       OLLAMA_HOST=$${OLLAMA_HOST} ollama pull $${OLLAMA_LLM_MODEL} &&
  #       echo '' &&
  #       echo '‚úÖ LLM model pull completed at:' $$(date) &&
  #       echo '' &&
  #       echo '=== PULLING EMBEDDING MODEL ===' &&
  #       echo 'üîÑ Starting download for embedding model: $${OLLAMA_EMBEDDING_MODEL}' &&
  #       echo '‚è∞ Timestamp:' $$(date) &&
  #       echo 'üì• This may take several minutes depending on model size...' &&
  #       echo '' &&
  #       OLLAMA_HOST=$${OLLAMA_HOST} ollama pull $${OLLAMA_EMBEDDING_MODEL} &&
  #       echo '' &&
  #       echo '‚úÖ Embedding model pull completed at:' $$(date) &&
  #       echo '' &&
  #       echo '=== VERIFYING MODELS ===' &&
  #       echo 'üìã Listing all available models:' &&
  #       OLLAMA_HOST=$${OLLAMA_HOST} ollama list &&
  #       echo '' &&
  #       echo 'üéâ ALL MODELS PULLED SUCCESSFULLY! üéâ' &&
  #       echo '‚è∞ Process completed at:' $$(date)
  #     "
  #   restart: "no"

      
  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - mcp_server
      - ollama
      # - ollama-model-puller
    ports:
      - ${OPEN_WEBUI_PORT-3000}:8080
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY='
      - 'OPENAI_API_KEY=${OPENAI_API_KEY}'
      - 'ENV=dev'
      - 'RESET_CONFIG_ON_START=True'
      - 'TOOL_SERVER_CONNECTIONS=[{"url": "http://mcp_server:8009", "path": "openapi.json", "auth_type": "none", "key": "", "config": {"enable": true, "access_control": null}, "info": {"id": "", "name": "MCP", "description": ""}}]'
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - mcp-network
    restart: unless-stopped

  database_server:
    build:
      context: ./docker
      dockerfile: DockerFile.database
    ports:
      - "8762:8762"
    volumes:
      - mcp_db_data:/app/database_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8762/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  mcp_server:
    build:
      context: ./docker
      dockerfile: DockerFIle.mcp
    container_name: mcp_server
    ports:
      - "8009:8009"
    depends_on:
      - database_server
      - postgres
      - ollama
      # - ollama-model-puller
    environment:
      - DATABASE_URL=http://database_server:8762
      - PYTHONPATH=/app
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
      # PostgreSQL configuration for rag2.py
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=vectordb
      - PG_USERNAME=postgres
      - PG_PASSWORD=password
      # Ollama configuration for rag2.py
      - OLLAMA_LLM_MODEL=${OLLAMA_LLM_MODEL:-llama3.2}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
    volumes:
      - .:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
  
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    labels:
      compose.service: qdrant
    networks:
      - mcp-network
      

  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    environment:
      POSTGRES_DB: vectordb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - mcp-network
    restart: unless-stopped

volumes:
  qdrant_storage: {}
  ollama: {}
  open-webui: {}
  mcp_db_data: {}
  postgres_data: {}
  pgadmin_data: {}

networks:
  mcp-network:
    driver: bridge


# docker exec -it mcp_server /bin/bash
# cd docker/mcp/stdio
# python rag2.py --embed path/to_json_file.json