services:

  # ollama:
  #   volumes:
  #     - ollama:/root/.ollama
  #   container_name: ollama
  #   pull_policy: always
  #   tty: true
  #   restart: unless-stopped
  #   image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}

  ollama:
    volumes:
      - ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: ${OLLAMA_GPU_DRIVER-nvidia}
    #           count: ${OLLAMA_GPU_COUNT-1}
    #           capabilities:
    #             - gpu
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    ports:
      - "11435:11434"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  ollama-model-puller:
    image: curlimages/curl:latest
    container_name: ollama-model-puller
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_LLM_MODEL=${OLLAMA_LLM_MODEL:-llama3.2}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
    networks:
      - mcp-network
    command: >
      sh -c "
        echo 'Waiting for Ollama to be fully ready...' &&
        sleep 5 &&
        echo 'Pulling LLM model: ${OLLAMA_LLM_MODEL:-llama3.2}...' &&
        curl -X POST http://ollama:11434/api/pull \
          -H 'Content-Type: application/json' \
          -d '{\"name\": \"${OLLAMA_LLM_MODEL:-llama3.2}\"}' &&
        echo 'Pulling embedding model: ${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}...' &&
        curl -X POST http://ollama:11434/api/pull \
          -H 'Content-Type: application/json' \
          -d '{\"name\": \"${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}\"}' &&
        echo 'All models pulled successfully!'
      "
    restart: "no"

  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - mcp_server
      - ollama
    ports:
      - ${OPEN_WEBUI_PORT-3000}:8080
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY='
      - 'OPENAI_API_KEY=${OPENAI_API_KEY}'
      - 'ENV=dev'
      - 'RESET_CONFIG_ON_START=True'
      - 'TOOL_SERVER_CONNECTIONS=[{"url": "http://mcp_server:8009", "path": "openapi.json", "auth_type": "none", "key": "", "config": {"enable": true, "access_control": null}, "info": {"id": "", "name": "MCP", "description": ""}}]'
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - mcp-network
    restart: unless-stopped

  database_server:
    build:
      context: ./docker
      dockerfile: DockerFile.database
    ports:
      - "8762:8762"
    volumes:
      - mcp_db_data:/app/database_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8762/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  mcp_server:
    build:
      context: ./docker
      dockerfile: DockerFIle.mcp
    ports:
      - "8009:8009"
    depends_on:
      - database_server
    environment:
      - DATABASE_URL=http://database_server:8762
      - PYTHONPATH=/app
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    volumes:
      - .:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
  
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    labels:
      compose.service: qdrant
    networks:
      - mcp-network

volumes:
  qdrant_storage: {}
  ollama: {}
  open-webui: {}
  mcp_db_data:

networks:
  mcp-network:
    driver: bridge
