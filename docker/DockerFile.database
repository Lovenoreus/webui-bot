FROM python:3.11-slim

# Build argument to control cert usage - SET THIS MANUALLY
ARG USE_CERTS=true

WORKDIR /app

# Apply cert-related configs ONLY when USE_CERTS=true
RUN if [ "$USE_CERTS" = "true" ]; then \
        printf "[global]\n\
trusted-host = pypi.org\n\
\tfiles.pythonhosted.org\n\
\tpypi.python.org\n\
\tdownload.pytorch.org\n" > /etc/pip.conf; \
    fi

# Conditionally set PIP_NO_VERIFY_CERTS
RUN if [ "$USE_CERTS" = "true" ]; then \
        echo "export PIP_NO_VERIFY_CERTS=1" >> /etc/environment; \
    fi

# Conditionally install uv with or without trusted-host flags (if you need uv)
RUN if [ "$USE_CERTS" = "true" ]; then \
        pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --trusted-host download.pytorch.org --no-cache-dir uv; \
    fi

# Conditionally copy and configure certificates
RUN if [ "$USE_CERTS" = "true" ]; then \
        mkdir -p /usr/local/share/ca-certificates && \
        if [ -f certs/fw.cer ]; then \
            cp certs/fw.cer /usr/local/share/ca-certificates/fw.crt; \
        fi; \
    fi

# Install system dependencies including ODBC drivers
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    apt-transport-https \
    unixodbc \
    unixodbc-dev \
    && if [ "$USE_CERTS" = "true" ]; then \
        update-ca-certificates; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Install Microsoft ODBC Driver 17 for SQL Server
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
    apt-get update && \
    ACCEPT_EULA=Y apt-get install -y msodbcsql17 && \
    rm -rf /var/lib/apt/lists/*

# Conditionally set certificate environment variables
RUN if [ "$USE_CERTS" = "true" ]; then \
        echo "export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> /etc/environment; \
        echo "export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" >> /etc/environment; \
    fi

# Copy requirements and install
COPY mcp/requirements.database.txt .

RUN pip install --no-cache-dir --default-timeout=300 --retries=20 -r requirements.database.txt

# Copy app files
COPY mcp/stdio/async_sql_local.py .
COPY mcp/stdio/config.json .

# Create data dir
RUN mkdir -p /app/database_data

# Expose port
EXPOSE 8762

# Healthcheck (assumes your script has a /health endpoint or similar; adjust if needed)
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8762/health || exit 1

# Run as non-root
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

# Run the DB server
CMD ["python", "async_sql_local.py"]